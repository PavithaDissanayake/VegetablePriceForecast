{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9567682,"sourceType":"datasetVersion","datasetId":5574487}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nisith210144g/leeksnotebook?scriptVersionId=202766309\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\n\n# Load the CSV file\nfile_path = '/kaggle/input/vegi-price/LeaksCleanedwithDollarWEEKLY.csv'\ndf = pd.read_csv(file_path)\n\n# Display the first few rows of the dataframe to understand its structure\ndf.head(), df.info()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-23T04:49:04.353554Z","iopub.execute_input":"2024-10-23T04:49:04.353928Z","iopub.status.idle":"2024-10-23T04:49:04.841497Z","shell.execute_reply.started":"2024-10-23T04:49:04.353883Z","shell.execute_reply":"2024-10-23T04:49:04.840394Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 209 entries, 0 to 208\nData columns (total 6 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   Unnamed: 0.1  209 non-null    int64  \n 1   Date          209 non-null    object \n 2   Unnamed: 0    209 non-null    float64\n 3   Kandy         209 non-null    float64\n 4   Dambulla      209 non-null    float64\n 5   Buy Rate      209 non-null    float64\ndtypes: float64(4), int64(1), object(1)\nmemory usage: 9.9+ KB\n","output_type":"stream"},{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"(   Unnamed: 0.1        Date  Unnamed: 0  Kandy  Dambulla    Buy Rate\n 0             0  2020-01-05         1.0   75.0    265.00  179.348000\n 1             1  2020-01-12         4.5   70.0     71.25  179.454450\n 2             2  2020-01-19         8.5  312.5    300.00  179.487025\n 3             3  2020-01-26        13.0  274.0    282.50  179.488120\n 4             4  2020-02-02        18.0  218.0    234.00  179.652840,\n None)"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nimport numpy as np\nimport pandas as pd\n\n# Assume df is your DataFrame that includes 'Kandy', 'Dambulla', and 'Buy Rate'\n\n# Create a lagged feature for 'Buy Rate' with a lag of 30 days\ndf['Buy Rate Lagged'] = df['Buy Rate'].shift(7)\n\n# Drop the first 30 rows since they will have NaN values due to the shift\ndf = df.dropna().reset_index(drop=True)\n\n# Normalize the data (including Kandy, Dambulla, and Buy Rate Lagged)\nscaler = MinMaxScaler()\nscaled_data = scaler.fit_transform(df[['Kandy', 'Dambulla', 'Buy Rate Lagged']])\n\n# Function to create sequences for LSTM\ndef create_sequences(data, seq_length):\n    X = []\n    y = []\n    for i in range(len(data) - seq_length):\n        X.append(data[i:i+seq_length])  # Input sequence\n        y.append(data[i+seq_length][:2])  # Target sequence (next step)\n    return np.array(X), np.array(y)\n\n# Define sequence length\nseq_length = 100\n\n# Create sequences\nX, y = create_sequences(scaled_data, seq_length)\n\n# Split the data into training, validation, and test sets\ntrain_ratio = 0.7\nval_ratio = 0.15\ntest_ratio = 0.15\n\ntrain_index = int(len(X) * train_ratio)\nval_index = int(len(X) * (train_ratio + val_ratio))\n\nX_train, X_val, X_test = X[:train_index], X[train_index:val_index], X[val_index:]\ny_train, y_val, y_test = y[:train_index], y[train_index:val_index], y[val_index:]\n\n# Display the shape of the resulting arrays\nprint(\"Training Set:\", X_train.shape, y_train.shape)\nprint(\"Validation Set:\", X_val.shape, y_val.shape)\nprint(\"Test Set:\", X_test.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-10-23T04:50:06.724165Z","iopub.execute_input":"2024-10-23T04:50:06.72507Z","iopub.status.idle":"2024-10-23T04:50:06.742156Z","shell.execute_reply.started":"2024-10-23T04:50:06.725008Z","shell.execute_reply":"2024-10-23T04:50:06.741313Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Training Set: (66, 100, 3) (66, 2)\nValidation Set: (14, 100, 3) (14, 2)\nTest Set: (15, 100, 3) (15, 2)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert 'Date' to datetime format\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# Check for missing values\nmissing_values = df.isnull().sum()\n\n# Display the result\ndf.set_index('Date', inplace=True)\ndf = df[['Kandy', 'Dambulla', 'Buy Rate Lagged']]  # We will focus on these two columns for LSTM\nmissing_values, df.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-23T04:50:14.414627Z","iopub.execute_input":"2024-10-23T04:50:14.415662Z","iopub.status.idle":"2024-10-23T04:50:14.434281Z","shell.execute_reply.started":"2024-10-23T04:50:14.415605Z","shell.execute_reply":"2024-10-23T04:50:14.433307Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(Unnamed: 0.1       0\n Date               0\n Unnamed: 0         0\n Kandy              0\n Dambulla           0\n Buy Rate           0\n Buy Rate Lagged    0\n dtype: int64,\n                  Kandy    Dambulla  Buy Rate Lagged\n Date                                               \n 2020-04-12   64.333333   62.500000       179.749050\n 2020-04-19   85.000000  114.000000       179.834480\n 2020-04-26  145.000000  161.250000       180.111940\n 2020-05-03  210.000000  212.437500       180.662225\n 2020-05-10  102.857143  112.142857       183.807625)"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras import mixed_precision\nimport keras_tuner as kt\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport shutil\nimport os\n\ntuner_directory = 'my_dir/lstm_hyperparameter_tuning'\n\nif os.path.exists(tuner_directory):\n    shutil.rmtree(tuner_directory)\n\n# Enable mixed precision training\nmixed_precision.set_global_policy('mixed_float16')\n\n# Define a function that builds the LSTM model with hyperparameters\ndef build_model(hp):\n    model = Sequential()\n    \n    # First LSTM layer\n    model.add(LSTM(units=hp.Int('units1', min_value=16, max_value=64, step=16),\n                   return_sequences=True, input_shape=(seq_length, 3)))\n    model.add(Dropout(hp.Float('dropout_rate1', 0.1, 0.5, step=0.1)))\n    \n    # Second LSTM layer\n    model.add(LSTM(units=hp.Int('units2', min_value=16, max_value=64, step=16), return_sequences=True))\n    model.add(Dropout(hp.Float('dropout_rate2', 0.1, 0.5, step=0.1)))\n    \n    # Third LSTM layer\n    model.add(LSTM(units=hp.Int('units3', min_value=16, max_value=64, step=16), return_sequences=False))\n    model.add(Dropout(hp.Float('dropout_rate3', 0.1, 0.5, step=0.1)))\n    \n    # First Dense layer\n    model.add(Dense(\n        units=hp.Int('dense_units1', min_value=16, max_value=64, step=16),\n        activation=hp.Choice('dense_activation1', values=['relu', 'tanh', 'sigmoid', 'elu', 'selu'])\n    ))\n    \n    # Second Dense layer\n    model.add(Dense(\n        units=hp.Int('dense_units2', min_value=16, max_value=64, step=16),\n        activation=hp.Choice('dense_activation2', values=['relu', 'tanh', 'sigmoid', 'elu', 'selu'])\n    ))\n\n    # Output layer with 3 units (for 3 variables)\n    model.add(Dense(2, dtype='float32'))  # Output layer with 3 outputs\n\n    # Compile the model\n    learning_rate = hp.Choice('learning_rate', values=[1e-4, 1e-3, 1e-2, 1e-1])  # Trying different learning rates\n    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate), loss='mean_squared_error')\n    \n    return model\n\n# Define a tuner using RandomSearch\ntuner = kt.RandomSearch(\n    build_model,\n    objective='val_loss',\n    max_trials=50,  # The number of different hyperparameter combinations to try\n    executions_per_trial=2,  # Number of models to train per trial (to reduce variance)\n    directory='my_dir',  # Directory to save search logs\n    project_name='lstm_hyperparameter_tuning'\n)\n\n# Convert data to tf.data pipelines\ntrain_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train)).batch(16).prefetch(tf.data.AUTOTUNE)\nval_dataset = tf.data.Dataset.from_tensor_slices((X_val, y_val)).batch(16).prefetch(tf.data.AUTOTUNE)\ntest_dataset = tf.data.Dataset.from_tensor_slices((X_test, y_test)).batch(16).prefetch(tf.data.AUTOTUNE)\n\n# Run the hyperparameter search\ntuner.search(train_dataset, epochs=200, validation_data=val_dataset, callbacks=[EarlyStopping(monitor='val_loss', patience=3)])\n\n# Retrieve the best model\nbest_model = tuner.get_best_models(num_models=1)[0]\n\n# Print the best hyperparameters\nbest_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\nprint(f\"Best Hyperparameters: {best_hps.values}\")\n\n# Optionally, retrain the best model\nhistory = best_model.fit(train_dataset, epochs=200, validation_data=val_dataset, verbose=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-23T04:50:21.186218Z","iopub.execute_input":"2024-10-23T04:50:21.186603Z","iopub.status.idle":"2024-10-23T05:01:17.154683Z","shell.execute_reply.started":"2024-10-23T04:50:21.186565Z","shell.execute_reply":"2024-10-23T05:01:17.153698Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Trial 50 Complete [00h 00m 15s]\nval_loss: 0.02336454950273037\n\nBest val_loss So Far: 0.020883744582533836\nTotal elapsed time: 00h 10m 19s\nBest Hyperparameters: {'units1': 64, 'dropout_rate1': 0.1, 'units2': 32, 'dropout_rate2': 0.1, 'units3': 32, 'dropout_rate3': 0.4, 'dense_units1': 48, 'dense_activation1': 'elu', 'dense_units2': 48, 'dense_activation2': 'elu', 'learning_rate': 0.0001}\nEpoch 1/200\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/saving/saving_lib.py:415: UserWarning: Skipping variable loading for optimizer 'adam', because it has 2 variables whereas the saved optimizer has 32 variables. \n  saveable.load_own_variables(weights_store.get(inner_path))\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 87ms/step - loss: 0.0529 - val_loss: 0.0262\nEpoch 2/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0404 - val_loss: 0.0373\nEpoch 3/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0377 - val_loss: 0.0450\nEpoch 4/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0387 - val_loss: 0.0495\nEpoch 5/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0343 - val_loss: 0.0488\nEpoch 6/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0341 - val_loss: 0.0466\nEpoch 7/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0365 - val_loss: 0.0441\nEpoch 8/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0320 - val_loss: 0.0442\nEpoch 9/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0303 - val_loss: 0.0477\nEpoch 10/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0331 - val_loss: 0.0489\nEpoch 11/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0344 - val_loss: 0.0461\nEpoch 12/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0359 - val_loss: 0.0441\nEpoch 13/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0350 - val_loss: 0.0449\nEpoch 14/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0349 - val_loss: 0.0454\nEpoch 15/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0322 - val_loss: 0.0456\nEpoch 16/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0304 - val_loss: 0.0442\nEpoch 17/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0298 - val_loss: 0.0416\nEpoch 18/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0316 - val_loss: 0.0409\nEpoch 19/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0303 - val_loss: 0.0417\nEpoch 20/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0319 - val_loss: 0.0461\nEpoch 21/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0286 - val_loss: 0.0505\nEpoch 22/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 0.0283 - val_loss: 0.0509\nEpoch 23/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - loss: 0.0344 - val_loss: 0.0473\nEpoch 24/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0274 - val_loss: 0.0457\nEpoch 25/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0351 - val_loss: 0.0425\nEpoch 26/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0280 - val_loss: 0.0397\nEpoch 27/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0314 - val_loss: 0.0399\nEpoch 28/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0335 - val_loss: 0.0430\nEpoch 29/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0317 - val_loss: 0.0483\nEpoch 30/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0320 - val_loss: 0.0524\nEpoch 31/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0309 - val_loss: 0.0528\nEpoch 32/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0301 - val_loss: 0.0507\nEpoch 33/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0288 - val_loss: 0.0489\nEpoch 34/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0281 - val_loss: 0.0462\nEpoch 35/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0256 - val_loss: 0.0429\nEpoch 36/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0289 - val_loss: 0.0416\nEpoch 37/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0319 - val_loss: 0.0447\nEpoch 38/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0269 - val_loss: 0.0479\nEpoch 39/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0295 - val_loss: 0.0488\nEpoch 40/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0282 - val_loss: 0.0474\nEpoch 41/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0306 - val_loss: 0.0449\nEpoch 42/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0318 - val_loss: 0.0393\nEpoch 43/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0311 - val_loss: 0.0378\nEpoch 44/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0280 - val_loss: 0.0402\nEpoch 45/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0335 - val_loss: 0.0424\nEpoch 46/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0332 - val_loss: 0.0427\nEpoch 47/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0329 - val_loss: 0.0417\nEpoch 48/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0290 - val_loss: 0.0430\nEpoch 49/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0280 - val_loss: 0.0457\nEpoch 50/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0274 - val_loss: 0.0481\nEpoch 51/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0337 - val_loss: 0.0460\nEpoch 52/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0259 - val_loss: 0.0438\nEpoch 53/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0250 - val_loss: 0.0429\nEpoch 54/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.0272 - val_loss: 0.0408\nEpoch 55/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0287 - val_loss: 0.0401\nEpoch 56/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0326 - val_loss: 0.0414\nEpoch 57/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0258 - val_loss: 0.0435\nEpoch 58/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0272 - val_loss: 0.0448\nEpoch 59/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0279 - val_loss: 0.0434\nEpoch 60/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0275 - val_loss: 0.0426\nEpoch 61/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0256 - val_loss: 0.0436\nEpoch 62/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0281 - val_loss: 0.0451\nEpoch 63/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0302 - val_loss: 0.0443\nEpoch 64/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0270 - val_loss: 0.0422\nEpoch 65/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0294 - val_loss: 0.0408\nEpoch 66/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0292 - val_loss: 0.0409\nEpoch 67/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0315 - val_loss: 0.0418\nEpoch 68/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0257 - val_loss: 0.0454\nEpoch 69/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0255 - val_loss: 0.0460\nEpoch 70/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0290 - val_loss: 0.0444\nEpoch 71/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0286 - val_loss: 0.0435\nEpoch 72/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0251 - val_loss: 0.0435\nEpoch 73/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0289 - val_loss: 0.0445\nEpoch 74/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0282 - val_loss: 0.0458\nEpoch 75/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0248 - val_loss: 0.0470\nEpoch 76/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0287 - val_loss: 0.0434\nEpoch 77/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0259 - val_loss: 0.0412\nEpoch 78/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0276 - val_loss: 0.0415\nEpoch 79/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0285 - val_loss: 0.0429\nEpoch 80/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0338 - val_loss: 0.0437\nEpoch 81/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0286 - val_loss: 0.0457\nEpoch 82/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0263 - val_loss: 0.0455\nEpoch 83/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0291 - val_loss: 0.0426\nEpoch 84/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0248 - val_loss: 0.0396\nEpoch 85/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0285 - val_loss: 0.0402\nEpoch 86/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0259 - val_loss: 0.0407\nEpoch 87/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0293 - val_loss: 0.0392\nEpoch 88/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0249 - val_loss: 0.0402\nEpoch 89/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0275 - val_loss: 0.0424\nEpoch 90/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0280 - val_loss: 0.0414\nEpoch 91/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0300 - val_loss: 0.0409\nEpoch 92/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0233 - val_loss: 0.0393\nEpoch 93/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0291 - val_loss: 0.0401\nEpoch 94/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0257 - val_loss: 0.0428\nEpoch 95/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0274 - val_loss: 0.0421\nEpoch 96/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0274 - val_loss: 0.0376\nEpoch 97/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0282 - val_loss: 0.0386\nEpoch 98/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0287 - val_loss: 0.0413\nEpoch 99/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.0315 - val_loss: 0.0424\nEpoch 100/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 0.0266 - val_loss: 0.0431\nEpoch 101/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 0.0283 - val_loss: 0.0431\nEpoch 102/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 0.0241 - val_loss: 0.0412\nEpoch 103/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 0.0258 - val_loss: 0.0378\nEpoch 104/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 0.0282 - val_loss: 0.0367\nEpoch 105/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - loss: 0.0274 - val_loss: 0.0387\nEpoch 106/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.0263 - val_loss: 0.0428\nEpoch 107/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.0253 - val_loss: 0.0463\nEpoch 108/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 0.0260 - val_loss: 0.0445\nEpoch 109/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 0.0291 - val_loss: 0.0413\nEpoch 110/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 0.0291 - val_loss: 0.0381\nEpoch 111/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - loss: 0.0284 - val_loss: 0.0381\nEpoch 112/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step - loss: 0.0266 - val_loss: 0.0390\nEpoch 113/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.0275 - val_loss: 0.0405\nEpoch 114/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0299 - val_loss: 0.0413\nEpoch 115/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0284 - val_loss: 0.0417\nEpoch 116/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0272 - val_loss: 0.0422\nEpoch 117/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0255 - val_loss: 0.0411\nEpoch 118/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0250 - val_loss: 0.0383\nEpoch 119/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0275 - val_loss: 0.0386\nEpoch 120/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0264 - val_loss: 0.0386\nEpoch 121/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0258 - val_loss: 0.0404\nEpoch 122/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0234 - val_loss: 0.0422\nEpoch 123/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0282 - val_loss: 0.0449\nEpoch 124/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0263 - val_loss: 0.0448\nEpoch 125/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0298 - val_loss: 0.0441\nEpoch 126/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0237 - val_loss: 0.0391\nEpoch 127/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0314 - val_loss: 0.0350\nEpoch 128/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0271 - val_loss: 0.0334\nEpoch 129/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0248 - val_loss: 0.0345\nEpoch 130/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0295 - val_loss: 0.0385\nEpoch 131/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0236 - val_loss: 0.0426\nEpoch 132/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0250 - val_loss: 0.0423\nEpoch 133/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0255 - val_loss: 0.0406\nEpoch 134/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0290 - val_loss: 0.0410\nEpoch 135/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0264 - val_loss: 0.0403\nEpoch 136/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0266 - val_loss: 0.0364\nEpoch 137/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0267 - val_loss: 0.0351\nEpoch 138/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0247 - val_loss: 0.0370\nEpoch 139/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0263 - val_loss: 0.0419\nEpoch 140/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step - loss: 0.0248 - val_loss: 0.0444\nEpoch 141/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0285 - val_loss: 0.0437\nEpoch 142/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0248 - val_loss: 0.0353\nEpoch 143/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0255 - val_loss: 0.0324\nEpoch 144/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0239 - val_loss: 0.0357\nEpoch 145/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0244 - val_loss: 0.0406\nEpoch 146/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0288 - val_loss: 0.0440\nEpoch 147/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0249 - val_loss: 0.0419\nEpoch 148/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step - loss: 0.0263 - val_loss: 0.0394\nEpoch 149/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0290 - val_loss: 0.0378\nEpoch 150/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0277 - val_loss: 0.0385\nEpoch 151/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0241 - val_loss: 0.0393\nEpoch 152/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0262 - val_loss: 0.0393\nEpoch 153/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0262 - val_loss: 0.0387\nEpoch 154/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0234 - val_loss: 0.0394\nEpoch 155/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0244 - val_loss: 0.0424\nEpoch 156/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0257 - val_loss: 0.0410\nEpoch 157/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0253 - val_loss: 0.0375\nEpoch 158/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0227 - val_loss: 0.0367\nEpoch 159/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0244 - val_loss: 0.0358\nEpoch 160/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0244 - val_loss: 0.0346\nEpoch 161/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0275 - val_loss: 0.0332\nEpoch 162/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0257 - val_loss: 0.0350\nEpoch 163/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0243 - val_loss: 0.0382\nEpoch 164/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0223 - val_loss: 0.0367\nEpoch 165/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0259 - val_loss: 0.0348\nEpoch 166/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0261 - val_loss: 0.0359\nEpoch 167/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0254 - val_loss: 0.0397\nEpoch 168/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0260 - val_loss: 0.0409\nEpoch 169/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0250 - val_loss: 0.0403\nEpoch 170/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0221 - val_loss: 0.0376\nEpoch 171/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0212 - val_loss: 0.0339\nEpoch 172/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0236 - val_loss: 0.0371\nEpoch 173/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0242 - val_loss: 0.0427\nEpoch 174/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0226 - val_loss: 0.0463\nEpoch 175/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0232 - val_loss: 0.0443\nEpoch 176/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0231 - val_loss: 0.0390\nEpoch 177/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0262 - val_loss: 0.0378\nEpoch 178/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0237 - val_loss: 0.0431\nEpoch 179/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0248 - val_loss: 0.0457\nEpoch 180/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0244 - val_loss: 0.0447\nEpoch 181/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0241 - val_loss: 0.0432\nEpoch 182/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0281 - val_loss: 0.0404\nEpoch 183/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0286 - val_loss: 0.0379\nEpoch 184/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0261 - val_loss: 0.0353\nEpoch 185/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0261 - val_loss: 0.0391\nEpoch 186/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0255 - val_loss: 0.0413\nEpoch 187/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0254 - val_loss: 0.0415\nEpoch 188/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0249 - val_loss: 0.0412\nEpoch 189/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0266 - val_loss: 0.0398\nEpoch 190/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0237 - val_loss: 0.0376\nEpoch 191/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0242 - val_loss: 0.0364\nEpoch 192/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0254 - val_loss: 0.0373\nEpoch 193/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0255 - val_loss: 0.0391\nEpoch 194/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0250 - val_loss: 0.0404\nEpoch 195/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0236 - val_loss: 0.0373\nEpoch 196/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0230 - val_loss: 0.0374\nEpoch 197/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0269 - val_loss: 0.0381\nEpoch 198/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 15ms/step - loss: 0.0246 - val_loss: 0.0400\nEpoch 199/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0251 - val_loss: 0.0388\nEpoch 200/200\n\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - loss: 0.0255 - val_loss: 0.0358\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions = best_model.predict(test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-10-23T05:04:28.530016Z","iopub.execute_input":"2024-10-23T05:04:28.530844Z","iopub.status.idle":"2024-10-23T05:04:28.761938Z","shell.execute_reply.started":"2024-10-23T05:04:28.530805Z","shell.execute_reply":"2024-10-23T05:04:28.760993Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 224ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"predictions_rescaled = scaler.inverse_transform(\n    np.concatenate([predictions, np.zeros((predictions.shape[0], 1))], axis=1)\n)[:, :2]\nprint(predictions_rescaled)","metadata":{"execution":{"iopub.status.busy":"2024-10-23T05:04:32.154617Z","iopub.execute_input":"2024-10-23T05:04:32.155006Z","iopub.status.idle":"2024-10-23T05:04:32.162888Z","shell.execute_reply.started":"2024-10-23T05:04:32.154973Z","shell.execute_reply":"2024-10-23T05:04:32.161598Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"[[182.86195287 184.30535561]\n [183.5315938  184.80914924]\n [184.52243298 185.63592058]\n [186.10419187 186.88108443]\n [188.03805211 188.41838476]\n [190.17768344 190.16580167]\n [192.46631673 192.08448101]\n [195.07056665 194.21447737]\n [197.79567221 196.43189559]\n [200.60290241 198.68131548]\n [203.36576897 200.87590538]\n [206.18608534 203.00694212]\n [208.71178421 204.87027129]\n [210.80773258 206.39786808]\n [212.36770955 207.51617569]]\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Rescale the predictions and y_test to original scale\ny_test_rescaled = scaler.inverse_transform(\n    np.concatenate([y_test, np.zeros((y_test.shape[0], 1))], axis=1)\n)[:, :2]\n\n\n# Create two subplots for 'Kandy' and 'Dambulla'\nfig, ax = plt.subplots(2, 1, figsize=(14, 10))\n\n# Plot for Kandy\nax[0].plot(y_test_rescaled[:, 0], color='blue', label='True Kandy')\nax[0].plot(predictions_rescaled[:, 0], color='red', linestyle='--', label='Predicted Kandy')\nax[0].set_title('True vs Predicted Values for Kandy')\nax[0].set_xlabel('Time')\nax[0].set_ylabel('Kandy Values')\nax[0].legend()\n\n# Plot for Dambulla\nax[1].plot(y_test_rescaled[:, 1], color='green', label='True Dambulla')\nax[1].plot(predictions_rescaled[:, 1], color='orange', linestyle='--', label='Predicted Dambulla')\nax[1].set_title('True vs Predicted Values for Dambulla')\nax[1].set_xlabel('Time')\nax[1].set_ylabel('Dambulla Values')\nax[1].legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-23T05:04:35.34946Z","iopub.execute_input":"2024-10-23T05:04:35.350156Z","iopub.status.idle":"2024-10-23T05:04:36.059844Z","shell.execute_reply.started":"2024-10-23T05:04:35.350117Z","shell.execute_reply":"2024-10-23T05:04:36.058982Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error\n\n\n# Calculate the Mean Squared Error (MSE) for each target ('Kandy' and 'Dambulla')\nmse_kandy = mean_squared_error(y_test_rescaled[:, 0], predictions_rescaled[:, 0])\nmse_dambulla = mean_squared_error(y_test_rescaled[:, 1], predictions_rescaled[:, 1])\n\n# Print the MSE results\nprint(f\"MSE for Kandy: {mse_kandy}\")\nprint(f\"MSE for Dambulla: {mse_dambulla}\")\n\n# Calculate the RMSE for each target ('Kandy' and 'Dambulla')\nrmse_kandy = np.sqrt(mean_squared_error(y_test_rescaled[:, 0], predictions_rescaled[:, 0]))\nrmse_dambulla = np.sqrt(mean_squared_error(y_test_rescaled[:, 1], predictions_rescaled[:, 1]))\n\n# Print the RMSE results\nprint(f\"RMSE for Kandy: {rmse_kandy}\")\nprint(f\"RMSE for Dambulla: {rmse_dambulla}\")\n\n# Calculate the RMSLE for each target ('Kandy' and 'Dambulla')\nrmsle_kandy = np.sqrt(mean_squared_log_error(y_test_rescaled[:, 0], predictions_rescaled[:, 0]))\nrmsle_dambulla = np.sqrt(mean_squared_log_error(y_test_rescaled[:, 1], predictions_rescaled[:, 1]))\n\n# Print the RMSLE results\nprint(f\"RMSLE for Kandy: {rmsle_kandy}\")\nprint(f\"RMSLE for Dambulla: {rmsle_dambulla}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-23T05:04:41.550149Z","iopub.execute_input":"2024-10-23T05:04:41.551077Z","iopub.status.idle":"2024-10-23T05:04:41.563251Z","shell.execute_reply.started":"2024-10-23T05:04:41.551022Z","shell.execute_reply":"2024-10-23T05:04:41.562287Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"MSE for Kandy: 6666.459509399682\nMSE for Dambulla: 7431.771090726814\nRMSE for Kandy: 81.64838950891611\nRMSE for Dambulla: 86.20772059813909\nRMSLE for Kandy: 0.6175524315016934\nRMSLE for Dambulla: 0.6147622717179245\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error\n\n# Calculate the MAE for each target ('Kandy' and 'Dambulla')\nmae_kandy = mean_absolute_error(y_test_rescaled[:, 0], predictions_rescaled[:, 0])\nmae_dambulla = mean_absolute_error(y_test_rescaled[:, 1], predictions_rescaled[:, 1])\n\n# Print the MAE results\nprint(f\"MAE for Kandy: {mae_kandy}\")\nprint(f\"MAE for Dambulla: {mae_dambulla}\")\n\n# Calculate the MAPE for each target ('Kandy' and 'Dambulla')\n# Avoid division by zero when calculating percentage error\ndef mean_absolute_percentage_error(y_true, y_pred):\n    return np.mean(np.abs((y_true - y_pred) / np.clip(y_true, 1e-10, None))) * 100\n\nmape_kandy = mean_absolute_percentage_error(y_test_rescaled[:, 0], predictions_rescaled[:, 0])\nmape_dambulla = mean_absolute_percentage_error(y_test_rescaled[:, 1], predictions_rescaled[:, 1])\n\n# Print the MAPE results\nprint(f\"MAPE for Kandy: {mape_kandy}%\")\nprint(f\"MAPE for Dambulla: {mape_dambulla}%\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-23T05:04:48.940083Z","iopub.execute_input":"2024-10-23T05:04:48.94097Z","iopub.status.idle":"2024-10-23T05:04:48.950258Z","shell.execute_reply.started":"2024-10-23T05:04:48.940929Z","shell.execute_reply":"2024-10-23T05:04:48.949179Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"MAE for Kandy: 70.7069636742274\nMAE for Dambulla: 70.65941694047716\nMAPE for Kandy: 74.89057910122007%\nMAPE for Dambulla: 72.1829701761085%\n","output_type":"stream"}]},{"cell_type":"code","source":"future_buy_rate_lagged = df['Buy Rate Lagged'].tail(7).values \nprint(future_buy_rate_lagged)","metadata":{"execution":{"iopub.status.busy":"2024-10-18T10:29:30.1882Z","iopub.status.idle":"2024-10-18T10:29:30.188649Z","shell.execute_reply.started":"2024-10-18T10:29:30.188408Z","shell.execute_reply":"2024-10-18T10:29:30.188429Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\n\n# Number of input features; this should be 3 because we have 'Kandy', 'Dambulla', and 'Buy Rate Lagged'\nn_features = 3\n\n# Assuming `seq_length` is the number of time steps the model was trained on\n# `last_sequence` is the most recent sequence from the testing data\nlast_sequence = np.array(X_test[-1])  # Taking the last sequence from the test dataset as the starting point\nlast_sequence = last_sequence.reshape(1, seq_length, n_features)  # Reshape to match the input shape of the model\n\n# Extract the next 30 \"Buy Rate Lagged\" values for upcoming predictions from the dataset\n# Assuming `df` has the column 'Buy Rate Lagged' and is in the correct chronological order\nfuture_buy_rate_lagged = df['Buy Rate Lagged'].tail(30).values.reshape(-1, 1)  # Last 30 days Buy Rate Lagged\n\n# Scale the \"Buy Rate Lagged\" values using the same scaler used earlier\n# scaled_future_buy_rate_lagged = scaler.transform(future_buy_rate_lagged)\nscaler = MinMaxScaler()\nscaled_future_buy_rate_lagged = scaler.fit_transform(future_buy_rate_lagged)\n# Number of future predictions you want to make\nn_future_steps = 30  # Predict the next 30 days\n\n# To store future predictions\nfuture_predictions = []\n\n# Predict future steps iteratively using scaled \"Buy Rate Lagged\"\nfor i in range(n_future_steps):\n    # Predict the next time step\n    next_step = best_model.predict(last_sequence)\n    \n    # Store the prediction (assuming output has 2 values: 'Kandy' and 'Dambulla')\n    future_predictions.append(next_step[0])  # Assuming the output is 2D: (batch_size, output_dim)\n\n    # Prepare the next input sequence for prediction\n    # Use the scaled \"Buy Rate Lagged\" from the future data instead of predicting it\n    new_input = np.array([[next_step[0][0], next_step[0][1], scaled_future_buy_rate_lagged[i][0]]])\n    \n    # Update the sequence to include the latest prediction, removing the first element to maintain the sequence length\n    last_sequence = np.append(last_sequence[:, 1:, :], new_input.reshape(1, 1, n_features), axis=1)\n\n# Convert the list to a numpy array for further processing or visualization\nfuture_predictions = np.array(future_predictions)\n\nprint(\"Future Predictions (Kandy, Dambulla):\", future_predictions)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-18T10:29:30.190186Z","iopub.status.idle":"2024-10-18T10:29:30.190629Z","shell.execute_reply.started":"2024-10-18T10:29:30.190363Z","shell.execute_reply":"2024-10-18T10:29:30.190381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions_rescaled = scaler.inverse_transform(\n    np.concatenate([future_predictions, np.zeros((future_predictions.shape[0], 1))], axis=1)\n)[:, :2]\n","metadata":{"execution":{"iopub.status.busy":"2024-10-18T10:29:30.192234Z","iopub.status.idle":"2024-10-18T10:29:30.192656Z","shell.execute_reply.started":"2024-10-18T10:29:30.192436Z","shell.execute_reply":"2024-10-18T10:29:30.192454Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(predictions_rescaled)","metadata":{"execution":{"iopub.status.busy":"2024-10-18T10:29:30.194389Z","iopub.status.idle":"2024-10-18T10:29:30.194943Z","shell.execute_reply.started":"2024-10-18T10:29:30.194662Z","shell.execute_reply":"2024-10-18T10:29:30.194689Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate a range of future time steps based on the number of future predictions\nn_future_steps = predictions_rescaled.shape[0]  # Number of future steps predicted\nfuture_time_steps = np.arange(1, n_future_steps + 1)  # Creating a range for the x-axis\n\n# Create two subplots for 'Kandy' and 'Dambulla'\nfig, ax = plt.subplots(2, 1, figsize=(14, 10))\n\n# Plot for Kandy\nax[0].plot(future_time_steps, predictions_rescaled[:, 0], color='red', linestyle='-', label='Predicted Kandy')\nax[0].set_title('Future Predictions for Kandy')\nax[0].set_xlabel('Future Time Steps')\nax[0].set_ylabel('Predicted Kandy Values')\nax[0].legend()\n\n# Plot for Dambulla\nax[1].plot(future_time_steps, predictions_rescaled[:, 1], color='orange', linestyle='-',  label='Predicted Dambulla')\nax[1].set_title('Future Predictions for Dambulla')\nax[1].set_xlabel('Future Time Steps')\nax[1].set_ylabel('Predicted Dambulla Values')\nax[1].legend()\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-18T10:29:30.196576Z","iopub.status.idle":"2024-10-18T10:29:30.197102Z","shell.execute_reply.started":"2024-10-18T10:29:30.196821Z","shell.execute_reply":"2024-10-18T10:29:30.196847Z"},"trusted":true},"execution_count":null,"outputs":[]}]}